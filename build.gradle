import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    // Languages
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30'

    // Build
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.gmazzo.buildconfig' version '3.0.1'

    // Publishing
    id "com.modrinth.minotaur" version "1.2.1"
}

ext {
    prerelease = !version_prerelease.trim().isEmpty()
    gitHash = (grgit != null && grgit.head() != null ? grgit.head().abbreviatedId : null)
    versionStr = {
        def ver = "$version_major.$version_minor.$version_patch"

        // CI Builds Only
        def run_num = System.getenv('GITHUB_RUN_NUMBER')
        if (run_num != null)
            ver += "-build.${run_num}"

        if (prerelease)
            ver += "-pre.${version_prerelease}"

        return ver
    }()
    versionWithRev = {
        def ver = versionStr

        if (ext.gitHash) {
            ver += "-rev.${ext.gitHash}"
        }

        return ver
    }()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.ajoberstar.grgit'
    apply plugin: 'com.github.gmazzo.buildconfig'

    version = versionStr
    group = 'dev.isxander'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io/' }
        maven { url = 'https://repo.sk1er.club/repository/maven-public' }
    }

    configurations {
        embed
        implementation.extendsFrom(embed)
    }

    jar {
        archiveBaseName.set("EvergreenHUD (${project.name}-${project.versionWithRev})")
        archiveVersion.set("")
        archiveClassifier.set("dev")

        exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'
    }

    shadowJar {
        archiveBaseName.set(jar.archiveBaseName.get())
        archiveClassifier.set('')
        archiveVersion.set('')

        configurations = [project.configurations.embed]
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
    }
}

configure(subprojects.findAll { it.name != "core" }) {
    apply plugin: 'com.modrinth.minotaur'

    task publishModrinth (type: TaskModrinthUpload) {
        onlyIf {
            System.getenv("MODRINTH")
        }

        token = System.getenv("MODRINTH")
        projectId = '1yIQcc2b'
        versionNumber = project.version
        uploadFile = jar
    }

    build.finalizedBy(publishModrinth)
}




